{"version":3,"sources":["components/AddCategory.js","helpers/getFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","getFetchGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","element","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","gif","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OAEI,cAAC,WAAD,UACI,sBAAMC,SAZO,SAACC,GAClBA,EAAMC,iBACFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAQd,SACI,uBAAOO,KAAK,OAAOC,YAAY,QAAQC,MAAOV,EAAYW,SAjB5C,SAACR,GACvBF,EAAcE,EAAMS,OAAOF,e,+BCRtBG,EAAY,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAElBC,EAFkB,iDAE8BC,UAAUH,GAFxC,+DAIDI,MAAMF,GAJL,cAIlBG,EAJkB,gBAMHA,EAASC,OANN,uBAMjBC,EANiB,EAMjBA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAY,IAAD,IAM7B,MAAM,CACFC,GAAID,EAAQC,GACZC,MAAOF,EAAQE,MACfV,IAAG,UAAEQ,EAAQG,cAAV,iBAAE,EAAgBC,wBAAlB,aAAE,EAAkCZ,QAjBvB,kBAqBjBM,GArBiB,4CAAH,sDCEZO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OAEI,cAAC,WAAD,UACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,UCLPO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECHwB,SAACA,GAEzB,MAA0Bf,mBAAS,CAE/BsB,KAAM,GACNa,SAAS,IAHb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAXAC,qBAAU,WAENxB,EAAaC,GAAUwB,MAAK,SAAAhB,GAAI,OAAIc,EAAS,CAEzCf,KAAMC,EACNY,SAAS,SAId,CAACpB,IAEGqB,EDjBsBI,CAAazB,GAA9BQ,EAAZ,EAAOD,KAAWa,EAAlB,EAAkBA,QAElB,OAEI,eAAC,WAAD,WACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACKR,EAAKC,KAAI,SAAAiB,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAIf,aEMxCgB,EAhBM,WAEjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OAEI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAAKS,EAAWgB,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCT1D4B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.a939ecfc.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState(\"\");\n    \n    const handleInputChange = (event) => {\n        setInputValue(event.target.value);\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (inputValue.trim().length > 2){\n            setCategories(categories => [inputValue, ...categories]);\n            setInputValue(\"\");\n        };\n        \n    };\n\n    return (\n\n        <Fragment>\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Anime\" value={inputValue} onChange={handleInputChange}/>\n            </form>\n        </Fragment>\n\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};","export const getFetchGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=G30g7LBaAPMlGI4Y7CZPxKSdLk8WPiOs`;\n\n    const response = await fetch(url);\n\n    const {data} = await response.json();\n\n    const gifs = data.map(element => {\n\n        // El signo \"?\" al final de un atributo garantiza que se retorne undefined en ves de un error  \n        // en caso de que no exista y se intente acceder a un sub atributo del mismo \n        // Se lo denomina encadenamiento opcional\n\n        return{\n            id: element.id,\n            title: element.title,\n            url: element.images?.downsized_medium?.url\n        };\n    });\n\n    return gifs;\n\n};","import React,{Fragment} from 'react';\n\nexport const GifGridItem = ({title, url}) => {\n\n    return (\n\n        <Fragment>\n            <div className=\"card animate__animated animate__fadeIn\">\n                <img src={url} alt={title}/>\n                <p>{title}</p>\n            </div>\n        </Fragment>\n\n    );\n\n};\n","import React,{Fragment} from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const {data:gifs, loading} = useFetchGifs(category);\n    \n    return (\n\n        <Fragment>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            <div className=\"card-grid\">           \n                {gifs.map(gif => <GifGridItem key={gif.id} {...gif} />)}\n            </div>\n        </Fragment>\n\n    );\n\n};\n","import { useState, useEffect } from \"react\";\nimport { getFetchGifs } from '../helpers/getFetchGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        \n        data: [],\n        loading: true\n\n    });\n    \n    useEffect(() => {\n\n        getFetchGifs(category).then(gifs => setState({\n\n            data: gifs,\n            loading: false\n\n        }));\n        \n    }, [category]);\n\n    return state;\n\n};","import React, {Fragment, useState} from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([\"One Piece\"]);\n    \n    return (\n\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n            <ol>{categories.map(category => <GifGrid key={category} category={category} />)}</ol>\n        </Fragment>\n        \n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}